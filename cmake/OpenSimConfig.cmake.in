# For an example of how to make your own CMake project that uses OpenSim,
# see SampleCMakeLists.txt.
#
# This config file defines the following variables:
#   @CMAKE_PROJECT_NAME@_FOUND -- True if search for libraries and headers
#                                 succeeds.
#   @CMAKE_PROJECT_NAME@_ROOT_DIR -- The installation directory.
#   @CMAKE_PROJECT_NAME@_LIB_DIR -- The directory containing libraries.
#                                   Suitable for link_directories().
#   @CMAKE_PROJECT_NAME@_INCLUDE_DIRS -- Suitable for include_directories().
#   @CMAKE_PROJECT_NAME@_LIBRARIES -- Suitable for target_link_libraries().
#   @CMAKE_PROJECT_NAME@_JAVA_WRAPPING -- Boolean indicating whether or not
#                                         OpenSim was built to include Java
#                                         wrapping.
#   @CMAKE_PROJECT_NAME@_PYTHON_WRAPPING -- Boolean indicating whether or not
#                                           OpenSim was built to include Python
#                                           wrapping.
#   @CMAKE_PROJECT_NAME@_JAR_FILE -- Path to jar file.
#   @CMAKE_PROJECT_NAME@_JAVA_FILES_DIR -- Directory containing the Java source
#                                          files.
#                                            
#
# Note that these variables also contain the Simbody include directories
# and libraries that OpenSim was built with.
#
# Adapted from SimbodyConfig.cmake
#

# To make the OpenSim installation relocatable:
@PACKAGE_INIT@

set_and_check(@CMAKE_PROJECT_NAME@_ROOT_DIR "@PACKAGE_CMAKE_INSTALL_PREFIX@")

# LIB_DIR
# -------
set_and_check(@CMAKE_PROJECT_NAME@_LIB_DIR "@PACKAGE_CMAKE_INSTALL_LIBDIR@")

if(NOT @OPENSIM_COPY_SIMBODY@)
    list(APPEND @CMAKE_PROJECT_NAME@_LIB_DIR "@Simbody_LIB_DIR@")
endif()

# INCLUDE_DIRS
# ------------
list(APPEND @CMAKE_PROJECT_NAME@_INCLUDE_DIRS
    "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@"
    "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@/Vendors/lepton/include"
    )

if(@OPENSIM_COPY_SIMBODY@)
    # Simbody headers have been copied to OpenSim.
    list(APPEND @CMAKE_PROJECT_NAME@_INCLUDE_DIRS
        "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@/Simbody")
else()
    # Refer to Simbody's own headers.
    list(APPEND @CMAKE_PROJECT_NAME@_INCLUDE_DIRS "@Simbody_INCLUDE_DIR@")
endif()

# LIBRARIES
# ---------
include("@PACKAGE_OPENSIM_INSTALL_CMAKEDIR@/@CMAKE_PROJECT_NAME@Targets.cmake")

# The osimTools target uses all the other targets.
# This makes a distinction between release and debug libraries.
list(APPEND @CMAKE_PROJECT_NAME@_LIBRARIES osimTools)

check_required_components(OpenSim)

# Python/Java Wrapping
#---------------------
set(@CMAKE_PROJECT_NAME@_PYTHON_WRAPPING @BUILD_PYTHON_WRAPPING@)

set(@CMAKE_PROJECT_NAME@_JAVA_WRAPPING @BUILD_JAVA_WRAPPING@)
set(@CMAKE_PROJECT_NAME@_JAVA_FILES_DIR 
    @PACKAGE_CMAKE_INSTALL_PREFIX@/@OPENSIM_INSTALL_JAVAJARDIR@/org)
set(@CMAKE_PROJECT_NAME@_JAR_FILE 
    @PACKAGE_CMAKE_INSTALL_PREFIX@/@OPENSIM_INSTALL_JAVAJARDIR@/@SWIG_JAVA_JAR_NAME@)

# Simbody
# -------
# The files OpenSimTargets-debug.cmake, OpenSimTargets-release.cmake, etc.
# list the Simbody libraries as dependencies by name (e.g., `SimTKmath`).
# Consider a CMake project that uses OpenSim: If CMake doesn't know of any
# targets named `SimTKmath`, then CMake will assume that `SimTKmath` is the
# name of a library, *not of a target*, and will add `-lSimTKmath` to the link
# line and assume that the library is on the (DY)LD_LIBRARY_PATH or in a
# directory mentioned in a call to `link_directories()`. However, if you've
# only built debug libraries, then there is no libSimTKmath.so (on Linux); there
# is only a libSimTKmath_d.so. So, we better tell CMake about a SimTKmath
# target; and that's why we make sure projects that use OpenSim have also
# imported Simbody's targts (that's what this find_package() does).
# TODO this doesn't properly handle the OPENSIM_COPY_SIMBODY option.
find_package(Simbody @SIMBODY_VERSION_TO_USE@ REQUIRED
    PATHS "@Simbody_ROOT_DIR@"
    NO_MODULE NO_DEFAULT_PATH)
